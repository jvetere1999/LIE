<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="b9f81d7a-2a0c-45e3-988c-2705462d3e70" name="Changes" comment="THIS PUSH&#10;Function Regex Tokenize begun&#10;Added grammar and regular expression documentation and new src folder for holding such&#10;ADDED&#10;Tests for Variable Assignment functions and operator functions&#10;Finished variable initialization and operator split as well as established recursive flow through split function&#10;Tokenization process and process to assign meaning to said tokens.&#10;Process to generate Abstract Syntax Trees (Action Trees)&#10;Basic Library function of LET&#10;Memory storage module and related data structures&#10;-&#10;String and Array Memory Mod&#10;Let testing in UtilizeTest&#10;Begin tokenizer rewrite towards full use of Regular Expression need to to everything other than fun and write text for fun&#10;&#10;TODO&#10;Refactor Action Tree to be cleaner: Low&#10;Continue Implementing Memory Maps: High&#10;Move all type alias's to separate file: Low&#10;Add Type relationships to Action Trees: High&#10;Finish Let: Very High&#10;Begin the rest of the utilize functions: High&#10;Build data structure packages: Medium&#10;&#10;Statement of Philosophy&#10;Ly is a Functional, Strongly typed, Interpreted, JVM Based Programing. [To be exapanded]">
      <change afterPath="$PROJECT_DIR$/.idea/.name" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/compiler.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/jarRepositories.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/kotlinc.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/modules.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/Documentation/Documentation.iml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/Documentation/src/RegEx.kt" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/kotlin/lexer/tokenizer/regexbased/FunctiionCallTokenizer.kt" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/kotlin/lexer/tokenizer/regexbased/FunctionAssignTokenizer.kt" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/kotlin/lexer/tokenizer/regexbased/OperatorTokenizer.kt" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/kotlin/lexer/tokenizer/regexbased/VariableAssignTokenizer.kt" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/kotlin/lexer/tokenizer/regexbased/VariableReassignTokenizer.kt" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/Documentation/LyeGrammar.tex" beforeDir="false" afterPath="$PROJECT_DIR$/src/Documentation/LyeGrammar.tex" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/kotlin/lexer/RegexTokenizer.kt" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/kotlin/lexer/tokenizer/regexbased/RegexTokenizer.kt" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/kotlin/lexer/tokenizer/Tokenizer.kt" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/kotlin/possiblydeprecated/Tokenizer.kt" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test/kotlin/lexer/RegexTokenizerKtTest.kt" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/kotlin/lexer/RegexTokenizerKtTest.kt" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="GRADLE">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="TestSuite" type="f1a62948:ProjectNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="TestSuite" type="f1a62948:ProjectNode" />
                <item name="Tasks" type="e4a08cd1:TasksNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="TestSuite" type="f1a62948:ProjectNode" />
                <item name="Tasks" type="e4a08cd1:TasksNode" />
                <item name="other" type="c8890929:TasksNode$1" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Kotlin Enum" />
        <option value="Kotlin Data Class" />
        <option value="Class" />
        <option value="JUnit5 Test Class" />
        <option value="Kotlin Class" />
        <option value="Kotlin File" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MacroExpansionManager">
    <option name="directoryName" value="5dzjw4yo" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2A76sCG9SaVHbxgNyl0tyKzrSvx" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
    "WebServerToolWindowFactoryState": "false",
    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary": "JUnit5",
    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5": "",
    "full.screen.before.presentation.mode": "true",
    "jdk.selected.JAVA_MODULE": "corretto-16",
    "jdk.selected.LATEX_MODULE_TYPE": "Native TeX Live SDK",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "project.structure.last.edited": "Modules",
    "project.structure.proportion": "0.15",
    "project.structure.side.proportion": "0.2",
    "settings.editor.selected.configurable": "TexifyConfigurable"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CreateTestDialog.Recents.Supers">
      <recent name="" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/src/main/kotlin/lexer/tokenizer/enums" />
    </key>
    <key name="CreateKotlinClassDialog.RecentsKey">
      <recent name="exceptions" />
    </key>
    <key name="MoveKotlinTopLevelDeclarationsDialog.RECENTS_KEY">
      <recent name="memory" />
      <recent name="memory.modules" />
    </key>
    <key name="CreateTestDialog.RecentsKey">
      <recent name="lexer" />
      <recent name="dentities" />
      <recent name="tree" />
    </key>
  </component>
  <component name="RunManager" selected="LaTeX.main">
    <configuration name="RegexTokenizerKtTest.Validate Parameter Sequence" type="GradleRunConfiguration" factoryName="Gradle" temporary="true">
      <ExternalSystemSettings>
        <option name="executionName" />
        <option name="externalProjectPath" value="$PROJECT_DIR$" />
        <option name="externalSystemIdString" value="GRADLE" />
        <option name="scriptParameters" value="" />
        <option name="taskDescriptions">
          <list />
        </option>
        <option name="taskNames">
          <list>
            <option value=":test" />
            <option value="--tests" />
            <option value="&quot;lexer.RegexTokenizerKtTest.Validate Parameter Sequence&quot;" />
          </list>
        </option>
        <option name="vmOptions" />
      </ExternalSystemSettings>
      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>
      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>
      <DebugAllEnabled>false</DebugAllEnabled>
      <method v="2" />
    </configuration>
    <configuration name="RegexTokenizerKtTest.getPULL_FUNCTION_ASSIGNMENT" type="GradleRunConfiguration" factoryName="Gradle" temporary="true">
      <ExternalSystemSettings>
        <option name="executionName" />
        <option name="externalProjectPath" value="$PROJECT_DIR$" />
        <option name="externalSystemIdString" value="GRADLE" />
        <option name="scriptParameters" value="" />
        <option name="taskDescriptions">
          <list />
        </option>
        <option name="taskNames">
          <list>
            <option value=":test" />
            <option value="--tests" />
            <option value="&quot;lexer.RegexTokenizerKtTest.getPULL_FUNCTION_ASSIGNMENT&quot;" />
          </list>
        </option>
        <option name="vmOptions" />
      </ExternalSystemSettings>
      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>
      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>
      <DebugAllEnabled>false</DebugAllEnabled>
      <method v="2" />
    </configuration>
    <configuration name="RegexTokenizerKtTest.getPULL_VARIABLE_ASSIGNMENT" type="GradleRunConfiguration" factoryName="Gradle" temporary="true">
      <ExternalSystemSettings>
        <option name="executionName" />
        <option name="externalProjectPath" value="$PROJECT_DIR$" />
        <option name="externalSystemIdString" value="GRADLE" />
        <option name="scriptParameters" value="" />
        <option name="taskDescriptions">
          <list />
        </option>
        <option name="taskNames">
          <list>
            <option value=":test" />
            <option value="--tests" />
            <option value="&quot;lexer.RegexTokenizerKtTest.getPULL_VARIABLE_ASSIGNMENT&quot;" />
          </list>
        </option>
        <option name="vmOptions" />
      </ExternalSystemSettings>
      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>
      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>
      <DebugAllEnabled>false</DebugAllEnabled>
      <method v="2" />
    </configuration>
    <configuration name="Unnamed" type="JUnit" factoryName="JUnit" nameIsGenerated="true">
      <module name="TestSuite.test" />
      <option name="PACKAGE_NAME" value="" />
      <option name="MAIN_CLASS_NAME" value="" />
      <option name="METHOD_NAME" value="" />
      <option name="TEST_OBJECT" value="package" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="LyeGrammar" type="LATEX_RUN_CONFIGURATION" factoryName="LaTeX configuration factory" temporary="true">
      <texify>
        <compiler>PDFLATEX</compiler>
        <compiler-path />
        <sumatra-path />
        <pdf-viewer>BUILT-IN-PDF-VIEWER</pdf-viewer>
        <viewer-command />
        <compiler-arguments />
        <envs />
        <main-file>$PROJECT_DIR$/src/Documentation/LyeGrammar.tex</main-file>
        <output-path>$PROJECT_DIR$/src/Documentation</output-path>
        <auxil-path>{projectDir}/auxil</auxil-path>
        <compile-twice>false</compile-twice>
        <output-format>PDF</output-format>
        <latex-distribution>TEXLIVE</latex-distribution>
        <has-been-run>true</has-been-run>
        <bib-run-config>[]</bib-run-config>
        <makeindex-run-config>[]</makeindex-run-config>
      </texify>
      <method v="2" />
    </configuration>
    <configuration name="Thesis" type="LATEX_RUN_CONFIGURATION" factoryName="LaTeX configuration factory">
      <texify>
        <compiler>PDFLATEX</compiler>
        <compiler-path />
        <sumatra-path />
        <pdf-viewer>NONE</pdf-viewer>
        <viewer-command />
        <compiler-arguments />
        <envs />
        <main-file />
        <output-path>$PROJECT_DIR$/src/Documentation</output-path>
        <auxil-path>{projectDir}/auxil</auxil-path>
        <compile-twice>false</compile-twice>
        <output-format>PDF</output-format>
        <latex-distribution>TEXLIVE</latex-distribution>
        <has-been-run>true</has-been-run>
        <bib-run-config>[]</bib-run-config>
        <makeindex-run-config>[]</makeindex-run-config>
      </texify>
      <method v="2" />
    </configuration>
    <configuration name="main" type="LATEX_RUN_CONFIGURATION" factoryName="LaTeX configuration factory" temporary="true">
      <texify>
        <compiler>PDFLATEX</compiler>
        <compiler-path />
        <sumatra-path />
        <pdf-viewer>BUILT-IN-PDF-VIEWER</pdf-viewer>
        <viewer-command />
        <compiler-arguments />
        <envs />
        <main-file>$PROJECT_DIR$/src/Documentation/src/main.tex</main-file>
        <output-path>$PROJECT_DIR$/src/Documentation/out</output-path>
        <auxil-path>{projectDir}/auxil</auxil-path>
        <compile-twice>false</compile-twice>
        <output-format>PDF</output-format>
        <latex-distribution>TEXLIVE</latex-distribution>
        <has-been-run>true</has-been-run>
        <bib-run-config>[]</bib-run-config>
        <makeindex-run-config>[]</makeindex-run-config>
      </texify>
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Gradle.RegexTokenizerKtTest.Validate Parameter Sequence" />
      <item itemvalue="Gradle.RegexTokenizerKtTest.getPULL_FUNCTION_ASSIGNMENT" />
      <item itemvalue="Gradle.RegexTokenizerKtTest.getPULL_VARIABLE_ASSIGNMENT" />
      <item itemvalue="JUnit.Unnamed" />
      <item itemvalue="LaTeX.Thesis" />
      <item itemvalue="LaTeX.main" />
      <item itemvalue="LaTeX.LyeGrammar" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="LaTeX.main" />
        <item itemvalue="LaTeX.LyeGrammar" />
        <item itemvalue="Gradle.RegexTokenizerKtTest.Validate Parameter Sequence" />
        <item itemvalue="Gradle.RegexTokenizerKtTest.getPULL_FUNCTION_ASSIGNMENT" />
        <item itemvalue="Gradle.RegexTokenizerKtTest.getPULL_VARIABLE_ASSIGNMENT" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="b9f81d7a-2a0c-45e3-988c-2705462d3e70" name="Changes" comment="" />
      <created>1654348481052</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1654348481052</updated>
      <workItem from="1654348482950" duration="3533000" />
      <workItem from="1654357005635" duration="1822000" />
      <workItem from="1654952819186" duration="32287000" />
      <workItem from="1655411780635" duration="1915000" />
      <workItem from="1655438078169" duration="110000" />
      <workItem from="1655438389791" duration="166000" />
      <workItem from="1655554890342" duration="20000" />
      <workItem from="1655554922218" duration="14000" />
      <workItem from="1655555045487" duration="1781000" />
      <workItem from="1656446371086" duration="42870000" />
      <workItem from="1656615534260" duration="163000" />
      <workItem from="1656904238359" duration="17342000" />
      <workItem from="1657149560339" duration="19000" />
      <workItem from="1657149863550" duration="60000" />
      <workItem from="1657149942084" duration="1194000" />
      <workItem from="1657155196908" duration="2958000" />
      <workItem from="1657200766925" duration="2069000" />
      <workItem from="1657204503687" duration="2887000" />
      <workItem from="1657208659667" duration="1614000" />
      <workItem from="1657214236777" duration="739000" />
      <workItem from="1657215091038" duration="227000" />
      <workItem from="1657215360580" duration="162000" />
      <workItem from="1657215546267" duration="369000" />
      <workItem from="1657218359345" duration="5982000" />
      <workItem from="1657542533266" duration="2450000" />
      <workItem from="1657546648926" duration="1289000" />
      <workItem from="1657709873947" duration="4714000" />
    </task>
    <task id="LOCAL-00001" summary="ADDED&#10;Tokenization process and process to assign meaning to said tokens.&#10;Process to generate Abstract Syntax Trees (Action Trees)&#10;Basic Library function of LET&#10;Memory storage module and related data structures&#10;&#10;TODO&#10;Refactor Action Tree to be cleaner: Low&#10;Continue Implementing Memory Maps: High&#10;Move all type alias's to separate file: Low&#10;Add Type relationships to Action Trees: High&#10;Finish Let: Very High&#10;Begin the rest of the utilize functions: High&#10;Build data structure packages: Medium&#10;&#10;Statement of Philosophy&#10;Ly is a Functional, Strongly typed, Interpreted, JVM Based Programing. [To be exapanded]">
      <created>1656588269875</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1656588269876</updated>
    </task>
    <task id="LOCAL-00002" summary="ADDED&#10;Tokenization process and process to assign meaning to said tokens.&#10;Process to generate Abstract Syntax Trees (Action Trees)&#10;Basic Library function of LET&#10;Memory storage module and related data structures&#10;&#10;TODO&#10;Refactor Action Tree to be cleaner: Low&#10;Continue Implementing Memory Maps: High&#10;Move all type alias's to separate file: Low&#10;Add Type relationships to Action Trees: High&#10;Finish Let: Very High&#10;Begin the rest of the utilize functions: High&#10;Build data structure packages: Medium&#10;&#10;Statement of Philosophy&#10;Ly is a Functional, Strongly typed, Interpreted, JVM Based Programing. [To be exapanded]">
      <created>1656588802844</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1656588802844</updated>
    </task>
    <task id="LOCAL-00003" summary="ADDED&#10;Tokenization process and process to assign meaning to said tokens.&#10;Process to generate Abstract Syntax Trees (Action Trees)&#10;Basic Library function of LET&#10;Memory storage module and related data structures&#10;&#10;TODO&#10;Refactor Action Tree to be cleaner: Low&#10;Continue Implementing Memory Maps: High&#10;Move all type alias's to separate file: Low&#10;Add Type relationships to Action Trees: High&#10;Finish Let: Very High&#10;Begin the rest of the utilize functions: High&#10;Build data structure packages: Medium&#10;&#10;Statement of Philosophy&#10;Ly is a Functional, Strongly typed, Interpreted, JVM Based Programing. [To be exapanded]">
      <created>1656588968915</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1656588968915</updated>
    </task>
    <task id="LOCAL-00004" summary="ADDED&#10;Tokenization process and process to assign meaning to said tokens.&#10;Process to generate Abstract Syntax Trees (Action Trees)&#10;Basic Library function of LET&#10;Memory storage module and related data structures&#10;-&#10;String and Array Memory Mod&#10;Let testing in UtilizeTest&#10;&#10;TODO&#10;Refactor Action Tree to be cleaner: Low&#10;Continue Implementing Memory Maps: High&#10;Move all type alias's to separate file: Low&#10;Add Type relationships to Action Trees: High&#10;Finish Let: Very High&#10;Begin the rest of the utilize functions: High&#10;Build data structure packages: Medium&#10;&#10;Statement of Philosophy&#10;Ly is a Functional, Strongly typed, Interpreted, JVM Based Programing. [To be exapanded]">
      <created>1656592040556</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1656592040556</updated>
    </task>
    <task id="LOCAL-00005" summary="ADDED&#10;Tokenization process and process to assign meaning to said tokens.&#10;Process to generate Abstract Syntax Trees (Action Trees)&#10;Basic Library function of LET&#10;Memory storage module and related data structures&#10;-&#10;String and Array Memory Mod&#10;Let testing in UtilizeTest&#10;Begin tokenizer rewrite towards full use of Regular Expression need to to everything other than fun and write text for fun&#10;&#10;TODO&#10;Refactor Action Tree to be cleaner: Low&#10;Continue Implementing Memory Maps: High&#10;Move all type alias's to separate file: Low&#10;Add Type relationships to Action Trees: High&#10;Finish Let: Very High&#10;Begin the rest of the utilize functions: High&#10;Build data structure packages: Medium&#10;&#10;Statement of Philosophy&#10;Ly is a Functional, Strongly typed, Interpreted, JVM Based Programing. [To be exapanded]">
      <created>1657101296560</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1657101296560</updated>
    </task>
    <task id="LOCAL-00006" summary="ADDED&#10;Tokenization process and process to assign meaning to said tokens.&#10;Process to generate Abstract Syntax Trees (Action Trees)&#10;Basic Library function of LET&#10;Memory storage module and related data structures&#10;-&#10;String and Array Memory Mod&#10;Let testing in UtilizeTest&#10;Begin tokenizer rewrite towards full use of Regular Expression need to to everything other than fun and write text for fun&#10;&#10;TODO&#10;Refactor Action Tree to be cleaner: Low&#10;Continue Implementing Memory Maps: High&#10;Move all type alias's to separate file: Low&#10;Add Type relationships to Action Trees: High&#10;Finish Let: Very High&#10;Begin the rest of the utilize functions: High&#10;Build data structure packages: Medium&#10;&#10;Statement of Philosophy&#10;Ly is a Functional, Strongly typed, Interpreted, JVM Based Programing. [To be exapanded]">
      <created>1657101745479</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1657101745479</updated>
    </task>
    <task id="LOCAL-00007" summary="THIS PUSH&#10;Tests for Variable Assignment functions and operator functions&#10;Finished variable initialization and operator split as well as established recursive flow through split function&#10;ADDED&#10;Tokenization process and process to assign meaning to said tokens.&#10;Process to generate Abstract Syntax Trees (Action Trees)&#10;Basic Library function of LET&#10;Memory storage module and related data structures&#10;-&#10;String and Array Memory Mod&#10;Let testing in UtilizeTest&#10;Begin tokenizer rewrite towards full use of Regular Expression need to to everything other than fun and write text for fun&#10;&#10;TODO&#10;Refactor Action Tree to be cleaner: Low&#10;Continue Implementing Memory Maps: High&#10;Move all type alias's to separate file: Low&#10;Add Type relationships to Action Trees: High&#10;Finish Let: Very High&#10;Begin the rest of the utilize functions: High&#10;Build data structure packages: Medium&#10;&#10;Statement of Philosophy&#10;Ly is a Functional, Strongly typed, Interpreted, JVM Based Programing. [To be exapanded]">
      <created>1657197993005</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1657197993005</updated>
    </task>
    <task id="LOCAL-00008" summary="THIS PUSH&#10;Function Regex Tokenize begun&#10;Added grammar and regular expression documentation and new src folder for holding such&#10;ADDED&#10;Tests for Variable Assignment functions and operator functions&#10;Finished variable initialization and operator split as well as established recursive flow through split function&#10;Tokenization process and process to assign meaning to said tokens.&#10;Process to generate Abstract Syntax Trees (Action Trees)&#10;Basic Library function of LET&#10;Memory storage module and related data structures&#10;-&#10;String and Array Memory Mod&#10;Let testing in UtilizeTest&#10;Begin tokenizer rewrite towards full use of Regular Expression need to to everything other than fun and write text for fun&#10;&#10;TODO&#10;Refactor Action Tree to be cleaner: Low&#10;Continue Implementing Memory Maps: High&#10;Move all type alias's to separate file: Low&#10;Add Type relationships to Action Trees: High&#10;Finish Let: Very High&#10;Begin the rest of the utilize functions: High&#10;Build data structure packages: Medium&#10;&#10;Statement of Philosophy&#10;Ly is a Functional, Strongly typed, Interpreted, JVM Based Programing. [To be exapanded]">
      <created>1657206994636</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1657206994636</updated>
    </task>
    <option name="localTasksCounter" value="9" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Phrase and actiontree" />
    <MESSAGE value="ADDED&#10;Tokenization process and process to assign meaning to said tokens.&#10;Process to generate Abstract Syntax Trees (Action Trees)&#10;Basic Library function of LET&#10;Memory storage module and related data structures&#10;&#10;TODO&#10;Refactor Action Tree to be cleaner: Low&#10;Continue Implementing Memory Maps: High&#10;Move all type alias's to separate file: Low&#10;Add Type relationships to Action Trees: High&#10;Finish Let: Very High&#10;Begin the rest of the utilize functions: High&#10;Build data structure packages: Medium&#10;&#10;Statement of Philosophy&#10;Ly is an Functional, Strongly typed, Interpreted, JVM Based Programing. [To be exapanded]" />
    <MESSAGE value="ADDED&#10;Tokenization process and process to assign meaning to said tokens.&#10;Process to generate Abstract Syntax Trees (Action Trees)&#10;Basic Library function of LET&#10;Memory storage module and related data structures&#10;&#10;TODO&#10;Refactor Action Tree to be cleaner: Low&#10;Continue Implementing Memory Maps: High&#10;Move all type alias's to separate file: Low&#10;Add Type relationships to Action Trees: High&#10;Finish Let: Very High&#10;Begin the rest of the utilize functions: High&#10;Build data structure packages: Medium&#10;&#10;Statement of Philosophy&#10;Ly is a Functional, Strongly typed, Interpreted, JVM Based Programing. [To be exapanded]" />
    <MESSAGE value="ADDED&#10;Tokenization process and process to assign meaning to said tokens.&#10;Process to generate Abstract Syntax Trees (Action Trees)&#10;Basic Library function of LET&#10;Memory storage module and related data structures&#10;-&#10;String and Array Memory Mod&#10;Let testing in UtilizeTest&#10;&#10;TODO&#10;Refactor Action Tree to be cleaner: Low&#10;Continue Implementing Memory Maps: High&#10;Move all type alias's to separate file: Low&#10;Add Type relationships to Action Trees: High&#10;Finish Let: Very High&#10;Begin the rest of the utilize functions: High&#10;Build data structure packages: Medium&#10;&#10;Statement of Philosophy&#10;Ly is a Functional, Strongly typed, Interpreted, JVM Based Programing. [To be exapanded]" />
    <MESSAGE value="ADDED&#10;Tokenization process and process to assign meaning to said tokens.&#10;Process to generate Abstract Syntax Trees (Action Trees)&#10;Basic Library function of LET&#10;Memory storage module and related data structures&#10;-&#10;String and Array Memory Mod&#10;Let testing in UtilizeTest&#10;Begin tokenizer rewrite towards full use of Regular Expression need to to everything other than fun and write text for fun&#10;&#10;TODO&#10;Refactor Action Tree to be cleaner: Low&#10;Continue Implementing Memory Maps: High&#10;Move all type alias's to separate file: Low&#10;Add Type relationships to Action Trees: High&#10;Finish Let: Very High&#10;Begin the rest of the utilize functions: High&#10;Build data structure packages: Medium&#10;&#10;Statement of Philosophy&#10;Ly is a Functional, Strongly typed, Interpreted, JVM Based Programing. [To be exapanded]" />
    <MESSAGE value="THIS PUSH&#10;Tests for Variable Assignment functions and operator functions&#10;Finished variable initialization and operator split as well as established recursive flow through split function&#10;ADDED&#10;Tokenization process and process to assign meaning to said tokens.&#10;Process to generate Abstract Syntax Trees (Action Trees)&#10;Basic Library function of LET&#10;Memory storage module and related data structures&#10;-&#10;String and Array Memory Mod&#10;Let testing in UtilizeTest&#10;Begin tokenizer rewrite towards full use of Regular Expression need to to everything other than fun and write text for fun&#10;&#10;TODO&#10;Refactor Action Tree to be cleaner: Low&#10;Continue Implementing Memory Maps: High&#10;Move all type alias's to separate file: Low&#10;Add Type relationships to Action Trees: High&#10;Finish Let: Very High&#10;Begin the rest of the utilize functions: High&#10;Build data structure packages: Medium&#10;&#10;Statement of Philosophy&#10;Ly is a Functional, Strongly typed, Interpreted, JVM Based Programing. [To be exapanded]" />
    <MESSAGE value="THIS PUSH&#10;Function Regex Tokenize begun&#10;Added grammar and regular expression documentation and new src folder for holding such&#10;ADDED&#10;Tests for Variable Assignment functions and operator functions&#10;Finished variable initialization and operator split as well as established recursive flow through split function&#10;Tokenization process and process to assign meaning to said tokens.&#10;Process to generate Abstract Syntax Trees (Action Trees)&#10;Basic Library function of LET&#10;Memory storage module and related data structures&#10;-&#10;String and Array Memory Mod&#10;Let testing in UtilizeTest&#10;Begin tokenizer rewrite towards full use of Regular Expression need to to everything other than fun and write text for fun&#10;&#10;TODO&#10;Refactor Action Tree to be cleaner: Low&#10;Continue Implementing Memory Maps: High&#10;Move all type alias's to separate file: Low&#10;Add Type relationships to Action Trees: High&#10;Finish Let: Very High&#10;Begin the rest of the utilize functions: High&#10;Build data structure packages: Medium&#10;&#10;Statement of Philosophy&#10;Ly is a Functional, Strongly typed, Interpreted, JVM Based Programing. [To be exapanded]" />
    <option name="LAST_COMMIT_MESSAGE" value="THIS PUSH&#10;Function Regex Tokenize begun&#10;Added grammar and regular expression documentation and new src folder for holding such&#10;ADDED&#10;Tests for Variable Assignment functions and operator functions&#10;Finished variable initialization and operator split as well as established recursive flow through split function&#10;Tokenization process and process to assign meaning to said tokens.&#10;Process to generate Abstract Syntax Trees (Action Trees)&#10;Basic Library function of LET&#10;Memory storage module and related data structures&#10;-&#10;String and Array Memory Mod&#10;Let testing in UtilizeTest&#10;Begin tokenizer rewrite towards full use of Regular Expression need to to everything other than fun and write text for fun&#10;&#10;TODO&#10;Refactor Action Tree to be cleaner: Low&#10;Continue Implementing Memory Maps: High&#10;Move all type alias's to separate file: Low&#10;Add Type relationships to Action Trees: High&#10;Finish Let: Very High&#10;Begin the rest of the utilize functions: High&#10;Build data structure packages: Medium&#10;&#10;Statement of Philosophy&#10;Ly is a Functional, Strongly typed, Interpreted, JVM Based Programing. [To be exapanded]" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="kotlin-line">
          <url>file://$PROJECT_DIR$/src/main/kotlin/lexer/tokenizer/regexbased/RegexTokenizer.kt</url>
          <line>78</line>
          <option name="timeStamp" value="5" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="kotlin-line">
          <url>file://$PROJECT_DIR$/src/main/kotlin/lexer/tokenizer/regexbased/RegexTokenizer.kt</url>
          <line>60</line>
          <option name="timeStamp" value="6" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="kotlin-line">
          <url>file://$PROJECT_DIR$/src/main/kotlin/lexer/tokenizer/regexbased/RegexTokenizer.kt</url>
          <line>145</line>
          <option name="timeStamp" value="7" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="kotlin-line">
          <url>file://$PROJECT_DIR$/src/main/kotlin/lexer/tokenizer/regexbased/FunctionAssignTokenizer.kt</url>
          <line>28</line>
          <option name="timeStamp" value="8" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="kotlin-line">
          <url>file://$PROJECT_DIR$/src/main/kotlin/lexer/tokenizer/regexbased/RegexTokenizer.kt</url>
          <line>11</line>
          <option name="timeStamp" value="10" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="kotlin-line">
          <url>file://$PROJECT_DIR$/src/main/kotlin/lexer/tokenizer/regexbased/RegexTokenizer.kt</url>
          <line>13</line>
          <option name="timeStamp" value="11" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="kotlin-line">
          <url>file://$PROJECT_DIR$/src/main/kotlin/lexer/tokenizer/regexbased/RegexTokenizer.kt</url>
          <line>10</line>
          <option name="timeStamp" value="12" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="kotlin-line">
          <url>file://$PROJECT_DIR$/src/main/kotlin/lexer/tokenizer/regexbased/RegexTokenizer.kt</url>
          <line>15</line>
          <option name="timeStamp" value="13" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
  <component name="com.intellij.coverage.CoverageDataManagerImpl">
    <SUITE FILE_PATH="coverage/TestSuite$TestSuite__compileTestKotlin_.ic" NAME="TestSuite [compileTestKotlin] Coverage Results" MODIFIED="1654350454783" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/TestSuite$ParserTest_testTokens.ic" NAME="ParserTest.testTokens Coverage Results" MODIFIED="1654350957791" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
  </component>
</project>